---
import { GoogleFontsOptimizer } from "astro-google-fonts-optimizer";
// import { ClientOnly } from './client-only.tsx';
import './_components/page.home/index.module.scss';
import './_components/page.works/index.module.scss';
import './_components/page.works-single/index.module.scss';
import './_components/page.profile/index.module.scss';
import IconFont from './assets/kuboniku.woff';
import type { RouteName } from "@/_foundation/type";

export interface Props {
	title: string;
  permalink: string;
  namespace: RouteName;
}

const { props } = Astro;

const SITE_TITLE = "Kuboniku.com | Web designer";
const DESCRIPTION = "Web designer Nagisa Kubo 久保渚 portfolio site";
const SITE_URL = "https://kuboniku.com";

const title = props.title ? props.title + ' | ' + SITE_TITLE : SITE_TITLE;

const idDev = process.env.NODE_ENV !== 'production';
const LOCAL_IP_ADDR = process.env.LOCAL_IP_ADDR || 'localhost';
---

<!DOCTYPE html>
<html lang="ja">
	<head>
    <slot name="prependHead" />
    <link as="font" crossorigin="" href={IconFont} rel="preload" type="font/woff" />
    {!idDev && (
      <link
        as="style"
        href="/assets/entry.css"
        onload="this.onload=null;this.rel='stylesheet';"
        rel="preload"
      />
    )}
		<meta charset="UTF-8" />
		<meta name="description" content={DESCRIPTION} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="format-detection" content="telephone=no" />
    <title>{title}</title>
    <meta content={DESCRIPTION} name="description" />
    <meta content={title} property="og:title" />
    <meta content={props.permalink ? 'article' : 'website'} property="og:type" />
    <meta content={DESCRIPTION} property="og:description" />
    <meta content={SITE_URL + props.permalink} property="og:url" />
    <meta content={SITE_TITLE} property="og:site_name" />
    <meta content={SITE_URL + '/ogp.jpg'} property="og:image" />
		<link rel="icon" href="/favicon.ico" />
    <GoogleFontsOptimizer url="https://fonts.googleapis.com/css2?family=Playfair+Display:ital@1&family=Noto+Sans+JP:wght@400&family=Roboto+Condensed:wght@300;700&display=swap" />
    {idDev && (
      <script defer src={`http://${LOCAL_IP_ADDR}:5173/src/entry.ts`} type="module" />
    )}
    {!idDev && <script defer src="/assets/entry.js" type="module" />}
	</head>
  <body class="" data-page={props.namespace}>
    <div aria-hidden="true" class="vh | fixed inset-0 w-screen pointer-events-none -z-1 invisible" data-ref="windowSizeWatcher"></div>
    <canvas aria-hidden="true" data-gl data-ref="backCanvas"></canvas>
    <slot />
    <div class="ui-cursor" data-component="Cursor"></div>
    { // <ClientOnly client:only="react" />
    }
  </body>
</html>

<style lang="scss" is:global>
  :root {
    --font: 'Noto Sans JP', sans-serif;
    --font-en: 'Playfair Display', serif;
    --font-roboto: 'Roboto Condensed', sans-serif;

    --grid: calc(1 / 12 * 100vw);
    --gutter: 0;
    --grid-gutter: 1.6rem;

    --vh: 1vh;

    --gap: calc(30 / 750 * 100vw);
    --aspect: 100%;

    --color-text: #e3e3e3;
    --color-text-primary: #858585;
    --color-theme: #1793a9;

    --ease-power3-inOut: cubic-bezier(0.77, 0, 0.175, 1);
    --ease-opacity: cubic-bezier(0.26, 0.06, 0, 1);

    @media (min-width: 640px) {
      --gap: calc(40 / 1280 * 100vw);
      --gutter: calc(16 / 1280 * 100vw);
    }
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  html {
    min-height: calc(var(--vh) * 100);
    min-height: 100svh;
    font-size: 10px;

    @media screen and (max-width: 1080px) {
      font-size: 9px;
    }

    @media screen and (max-width: 960px) {
      font-size: 8px;
    }

    @media screen and (max-width: 854px) {
      font-size: 7px;
    }

    @media screen and (max-width: 767px) {
      font-size: 6px;
    }

    @media screen and (max-width: 639px) {
      font-size: 10px;
    }

    @media (min-width: 1680px) {
      font-size: 12px;
    }
  }

  body {
    color: var(--color-text);
    background: #191918;
    overflow-x: hidden;
    font-family: var(--font);
    overflow-wrap: break-word;
    -webkit-text-size-adjust: 100%;
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: unset;
    -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
    font-feature-settings: 'palt' 1;

    & ::-moz-selection {
      color: #fff;
      background: var(--color-theme);
    }

    & ::selection {
      color: #fff;
      background: var(--color-theme);
    }

    @media (min-resolution: 1.5dppx) {
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
  }

  :any-link {
    // color: inherit;
    text-decoration: none;
  }

  :focus-visible {
    @media (max-width: 639px) {
      @media not (hover: hover) {
        outline-style: none;
      }
    }
  }

  ol,
  ul {
    list-style: none;
  }

  img {
    max-width: 100%;
    height: auto;
    display: block;
  }

  picture {
    display: block;
  }

  summary {
    display: block;
    list-style: none;
  }

  summary::-webkit-details-marker {
    display: none;
  }

  @font-face {
    font-family: 'kuboniku';
    src: url('./assets/kuboniku.woff') format('woff');
    font-weight: normal;
    font-style: normal;
    font-display: block;
  }

  [class^='icon-'],
  [class*=' icon-'] {
    /* use !important to prevent issues with browser extensions that change fonts */
    font-family: 'kuboniku' !important;
    speak: never;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;

    /* Better Font Rendering =========== */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .icon-arrow_down:before {
    content: '\e900';
  }

  .icon-arrow_right:before {
    content: '\e901';
  }

  .icon-logo_sp:before {
    content: '\e902';
  }

  .icon-logo:before {
    content: '\e903';
  }

  [data-gl] {
    -webkit-user-select: none;
    -moz-user-select: none;
    contain: strict;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    overflow: clip;
    transform: rotate(.0001deg);
    pointer-events: none;
    user-select: none;
  }

  body[data-page="home"] {
    overscroll-behavior-y: none;
    overflow: hidden;
    position: fixed;
    width: 100%;
    height: 100%;
  }

</style>

<style lang="scss">
  .vh {
    height: 100vh;
    // height: 100svh;
  }


  .bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    background: linear-gradient(180deg, #fff, #eaeaea);

    @media (prefers-color-scheme: dark) {
      background: var(--color-bg);
    }
  }

  .scrollbar {
    position: fixed;
    top: 50vh;
    right: 3.2rem;
    z-index: 99;
    pointer-events: none;

    @media (min-width: 640px) {
      right: 4rem;
    }
  }

  .ui-cursor {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 999;

    @media not (hover: hover) {
      display: none;
    }
  }
</style>
