import { assert } from './assert'
import { getNodeDataType } from './html'
import { q } from './selector'
import { guard } from './guard'
import type { IComponent } from './types'

class Lake {
  definitions = new Map<string, [IComponent, string[]]>()

  static create() {
    return new Lake()
  }

  define = (id: string, fn: IComponent, deps = [] as string[]) => {
    guard(this.definitions.has(id))
    this.definitions.set(id, [fn, deps])
  }

  require = (id: string) => {
    return this.definitions.get(id)
  }
}

const __ = Lake.create()

const lake = __.definitions
const defineComponent = __.define
const requireComponent = __.require

//-------//

function maybeComponent(name: string) {
  const value = requireComponent(name)
  assert(value, `${name} does not exist`)
  return value
}

function createComponent(name: string) {
  const [context] = maybeComponent(name)
  return context
}

function onSetup() {
  q(`[data-component]`).forEach(el => {
    const { component, props } = getNodeDataType(el)
    const context = createComponent(component)
    context.setup(el, props)
  })
}

function onCleanup() {
  //
}

export { lake, defineComponent, requireComponent, onSetup, onCleanup }
