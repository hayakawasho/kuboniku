import { assert } from './assert'
import { getNodeDataType } from './html'
import { q } from './selector'
import type { IComponent } from './types'

/**
 *
 */

class Lake {
  definitions = new Map<string, [IComponent, string[]]>()

  static create() {
    return new Lake()
  }

  define = (id: string, fn: IComponent, deps = [] as string[]) => {
    this.definitions.set(id, [fn, deps])
  }

  require = (id: string) => {
    return this.definitions.get(id)
  }

  onSetup = () => {
    const elements = q(`[data-component]`)

    const maybeComponent = (key: string) => {
      const value = this.require(key)
      assert(value, `${key} does not exist`)
      return value
    }

    elements.forEach((el) => {
      const { component, props } = getNodeDataType(el)
      const [context] = maybeComponent(component)

      context.setup(el, props)
    })
  }

  onCleanup = () => {
    //
  }
}

const __ = Lake.create()

const lake = __.definitions
const defineComponent = __.define
const requireComponent = __.require
const onSetup = __.onSetup
const onCleanup = __.onCleanup

export { lake, defineComponent, requireComponent, onSetup, onCleanup }
