import { assert } from './assert'
import { getNodeDataType } from './html'
import { q } from './selector'
import { guard } from './guard'
import type { IComponent } from './types'

class Lake {
  definitions = new Map<string, [IComponent, string[]]>()

  static create() {
    return new Lake()
  }

  define = (id: string, fn: IComponent, deps = [] as string[]) => {
    guard(this.definitions.has(id))
    this.definitions.set(id, [fn, deps])
  }

  resolve = (id: string) => {
    const context = this.definitions.get(id)
    assert(context, `${id} does not exist`)
    return context[0]
  }
}

const __ = Lake.create()

const lake = __.definitions
const defineComponent = __.define
const resolveComponent = __.resolve

//-------//

function onSetup() {
  q(`[data-component]`).forEach(el => {
    const { component, props } = getNodeDataType(el)
    const context = resolveComponent(component)
    context.setup(el, props)
  })
}

function onCleanup() {
  //
}

export { lake, defineComponent, resolveComponent, onSetup, onCleanup }
